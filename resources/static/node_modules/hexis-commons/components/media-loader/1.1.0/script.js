App.mediaLoader = {
  selector: '[data-src]:not([currentSizeLoaded]), [data-srcSizes]:not([currentSizeLoaded])',
  selectorPreload: '[data-src][data-preload]:not([currentSizeLoaded])',
  loaded: [],


  /*------------------------------------------------------------------------------------
    CHECK
  ------------------------------------------------------------------------------------*/
  check: function(target) {
    console.log('%cApp.mediaLoader.check();', 'color:gray;');

    // Base setup
    var target = target || null;
    var localNodes;
    var offset = {};

    // Determine if check is global or scoped
    if (target === undefined || target === null) {
      localNodes = $(App.mediaLoader.selector);
    } else {
      localNodes = $(target).find(App.mediaLoader.selector);
    }

    // Check every node if it's (about to be) visible on the screen
    localNodes.each(function App_mediaLoader_check_eachLoop(i) {
      if (App.checkIfVisible(localNodes[i])=== true) {

        // Additionally, skip the [data-preload] tags unless everything else has loaded
        if ($(localNodes[i]).attr('data-preload') !== undefined) {
          if (ifTrue(App.load.secondary) === true) {
            App.mediaLoader.load(localNodes[i]);
            return;
          }
        }

        // Otherwise just load the node...
        else {
          App.mediaLoader.load(localNodes[i]);
        }
      }
    });
  },


  /*------------------------------------------------------------------------------------
    LOAD
  ------------------------------------------------------------------------------------*/
  load: function(node, callback) {

    // Default callback is blank
    var callback = callback || function(){};
    var srcTypes = ['img', 'video', 'audio', 'source', 'iframe'];

    // Fetch node data
    var type = $(node).prop('tagName').toLowerCase();
    var dataSrc = $(node).attr('data-src');
    var srcSizes = $(node).attr('data-srcSizes');

    // Non-native element types like div's get a background image instead of src attribute
    if (srcTypes.indexOf(type) < 0) {
      var bgImage = App.mediaPathPrefix + dataSrc;
      var ghostImage = $('<img />').attr('src', bgImage).css('display','none');

      ghostImage.load(function(){
        App.mediaLoader.finishedLoading(node, bgImage, function(){

          var style = 'background-image:url("'+ bgImage +'")';

          // If there is an existing style attribute, we simply add onto it to avoid overwrites
          if ($(node).attr('style') !== undefined) {
            var style = $(node).attr('style') + 'background-image:url("'+ bgImage +'")';
          }

          $(node).attr({ style: style }).removeAttr('data-src');
          ghostImage.remove();
          callback();
        });
      }).appendTo('body');

      return;
    }

    // If node has a source, and no dataSrc, we skip it...
    if (dataSrc === undefined || dataSrc === null || dataSrc === '') {

      // If this source is already loaded, just call finishedLoading()
      if (App.mediaLoader.loaded.indexOf($(node).attr('src')) > -1 || node.complete === true) {
        App.mediaLoader.finishedLoading(node, $(node).attr('src'), callback);
      }

      // Otherwise, make a new bind
      else {
        $(node).attr('nodeIsLoading', true);
        $(node).load(function(){
          App.mediaLoader.finishedLoading(node, $(node).attr('src'), callback);
        });
      }

      // Return since matched
      return;
    }

    // In case there is only a single size we load it directly
    else if (srcSizes === null || srcSizes === undefined || srcSizes === '') {
      if (node.src.length === 0 || node.src === '' || !node.complete) {
        $(node).attr('nodeIsLoading', true);
        console.log('%cApp.mediaLoader.load("'+  dataSrc +'");', 'color:gray;');
        $(node).load(function(){
          App.mediaLoader.finishedLoading(node, dataSrc, callback);
        }).attr('src', dataSrc).removeAttr('data-src');
        return;
      }
    }

    // Otherwise, determine the best size to load
    else {

      // Parse node data
      var file = dataSrc.substring(dataSrc.lastIndexOf('/')+1);
      var filename = file.replace(/\.[^/.]+$/, "");
      var extension = file.substr(file.lastIndexOf('.')+1);
      var pathBase = dataSrc.slice(0,-(extension.length + 1));
      srcSizes = srcSizes.split(',');

      // Load the largest size acceptable (checking array in reverse)
      for (i=srcSizes.length - 1; i >= 0; i--) {
        var size = srcSizes[i].trim();
        var newPath = pathBase + '-' + size + '.' + extension;

        if (App.checkMediaQuery(size) === true) {
          $(node).attr('nodeIsLoading', true);

          // Load the matched size
          console.log('%cApp.mediaLoader.load("' + newPath + '");', 'color:gray;');
          $(node).attr({
            'src': newPath,
            'currentSizeLoaded': true
          }).on('load', App.mediaLoader.finishedLoading(node, newPath, callback));

          // Stop propagation when match is found
          return;
        }
      }

      // If no sizes are matched, load the default (smallest) size
      if ($(node).attr('activeSize') !== 'default') {
        console.log('%cApp.mediaLoader.load("'+  dataSrc +'"); --default', 'color:gray;');
        $(node).on(function(){
          App.mediaLoader.finishedLoading(node, dataSrc, callback);
        }).attr({
          'src': dataSrc,
          'currentSizeLoaded': true
        });
      } else {
        $(node).on('load', App.mediaLoader.finishedLoading(node, dataSrc, callback));
      }
    }
  },


  /*------------------------------------------------------------------------------------
    SINGLE NODE FINISHES LOADING
  ------------------------------------------------------------------------------------*/
  finishedLoading: function (node, url, callback) {
    console.info('%cApp.mediaLoader.done("'+ url +'");', 'color:#68B046;');
    App.mediaLoader.loaded.push(url);

    // Default is to gently fade in the media after it has loaded
    var fadeIn = $(node).attr('data-fadeIn') !== undefined;
    if (fadeIn === true) {
      $(node).removeAttr('nodeIsLoading').removeAttr('data-preload').animate({
        opacity: 1
      }, 500);
    }

    // Otherwise, leave opacity as it is for other design purposes
    else {
      $(node).removeAttr('nodeIsLoading').removeAttr('data-preload');
    }

    // Run callback function asynchronously
    setTimeout(callback, 50);
  },


  preload: function(scope) {

    // Determine if check is global or scoped
    if (scope === undefined || scope === null) {
      localNodes = $(App.mediaLoader.selectorPreload);
    } else {
      localNodes = $(scope).find(App.mediaLoader.selectorPreload);
    }

    // Preload every node
    localNodes.each(function App_mediaLoader_check_eachLoop(i) {
      App.mediaLoader.load(localNodes[i]);
    });
  },


  /*------------------------------------------------------------------------------------
    WAIT FOR ALL (TO LOAD)
  ------------------------------------------------------------------------------------*/
  waitForAll: function(target, callback, preloadPriority) {
    var preloadPriority = preloadPriority || 0;

    // Check for common errors
    if (typeof target === 'function') {
      console.error('%cApp.mediaLoader.waitForAll(); ERROR: First parameter cannot be a function!', 'color:red;');
      return false;
    }

    // Find all descendant nodes
    var localNodes = $(target).find(App.mediaLoader.selector + ', [src]');
    var nodesLoaded = 0;

    // If there is no define preload priority, we exclude every preload element
    if (preloadPriority === 0) {
      var localNodes = localNodes.filter(':not([data-preload])');
    }

    // Otherwise, loop through the elements and cut out the ones higher than the priority number
    else {
      var defaults = [];
      var priority1 = [];
      var priority2 = [];
      var priority3 = [];
      var priority4 = [];

      // Iterate through each node...
      localNodes.each(function(index){
        var itemPriority = parseInt($(this).attr('data-preload'));

        // Exclude items which are higher priority than requested
        // And sort items in order of priority
        if (itemPriority <= preloadPriority)  {
          if (itemPriority === 1)  {
            priority1.push($(this)[0]);
          } else if (itemPriority === 2)  {
            priority2.push($(this)[0]);
          } else if (itemPriority === 3)  {
            priority3.push($(this)[0]);
          } else if (itemPriority > 3)  {
            priority4.push($(this)[0]);
          }
        } else if (itemPriority === undefined)  {
          defaults.push($(this)[0]);
        }
      });

      localNodes = $( defaults.concat(priority1, priority2, priority3, priority4) );
      console.log(localNodes);
    }

    // Log the number of nodes...
    console.log('App.mediaLoader.waitForAll(' + localNodes.length + ');');

    // If this scope does not have any matched nodes, then callback immediatelly
    if (localNodes.length === 0) {
      console.info('%cApp.mediaLoader.waitForAll.done(): No images were found within this selector!', 'color:#68B046;');
      callback();
      return;
    }

    function checkIfAll() {
      if (nodesLoaded === localNodes.length) {
        console.info('%cApp.mediaLoader.waitForAll.done('+ localNodes.length +');', 'color:#68B046;');
        callback();
        return;
      }
    }

    // Call every node source
    localNodes.each(function(i){
      App.mediaLoader.load(localNodes[i], function(){
        nodesLoaded++;
        checkIfAll();
      });
    });
  }
};


// Do an initial check
queue.documentLoad.push(function App_mediaLoader_checkOnReady(){
  App.mediaLoader.check();
});


// Check on scroll
queue.globalScroll.push(function App_mediaLoader_checkOnScroll(){
  App.mediaLoader.check();
});


// Check on resize
queue.globalResize.push(function App_mediaLoader_checkOnResize(){
  $('[currentSizeLoaded]').removeAttr('currentSizeLoaded');
  App.mediaLoader.check();
});
