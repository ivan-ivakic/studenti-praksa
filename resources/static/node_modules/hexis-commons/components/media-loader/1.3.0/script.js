App.mediaLoader = {
  selector: '[data-src]:not([currentSizeLoaded]):not([data-ignore]), [data-srcSizes]:not([currentSizeLoaded]):not([data-ignore])',
  selectorPreload: '[data-src][data-preload]:not([currentSizeLoaded]):not([data-ignore])',
  loaded: [],


  /*------------------------------------------------------------------------------------
    CHECK
  ------------------------------------------------------------------------------------*/
  check: function(target) {
    if(App.verbose){ console.log('%cApp.mediaLoader.check();', 'color:gray;'); }

    // Base setup
    var target = target || null;
    var localNodes;
    var offset = {};

    // Determine if check is global or scoped
    if (target === undefined || target === null) {
      localNodes = document.querySelectorAll(App.mediaLoader.selector);
    } else {
      localNodes = target.querySelectorAll(App.mediaLoader.selector);
    }

    // Check every node if it's (about to be) visible on the screen
    array(localNodes).forEach(function(node) {
      if (App.checkIfVisible(node)=== true) {

        // Additionally, skip the [data-preload] tags
        if (node.getAttribute('data-preload') !== undefined) {
          return;
        }

        // Otherwise just load the node...
        else { App.mediaLoader.load(node); }
      }
    });
  },


  /*------------------------------------------------------------------------------------
    LOAD
  ------------------------------------------------------------------------------------*/
  load: function(node, callback) {

    // Default callback is blank
    var callback = callback || function(){};
    var srcTypes = ['img', 'video', 'audio', 'source', 'iframe'];

    // Fetch node data
    var type = node.tagName.toLowerCase();
    var dataSrc = node.getAttribute('data-src');
    var srcSizes = node.getAttribute('data-srcSizes');

    // Non-native element types like div's get a background image instead of src attribute
    if (srcTypes.indexOf(type) < 0) {
      var bgImage = App.mediaPathPrefix + dataSrc;
      var ghostImage = new Image();

      // When the ghost image loads...
      ghostImage.addEventListener('load', function(){
        App.mediaLoader.finishedLoading(node, bgImage, function(){

          // Setup the style attribute
          var style = 'background-image:url("'+ bgImage +'")';
          if (node.hasAttribute('style')) { var style = node.getAttribute('style') + ';background-image:url("'+ bgImage +'");'; }
          node.setAttribute('style', style);

          // Clear the object
          ghostImage = null;

          // Return
          callback();
        });
      });

      // Start loading the image...
      ghostImage.src = bgImage;
      return;
    }

    // If node has a source, and no data-src, we skip it...
    if (dataSrc === undefined || dataSrc === null || dataSrc === '') {
      var src = node.getAttribute('src');

      // If this source is already loaded, just call finishedLoading()
      if (App.mediaLoader.loaded.indexOf(src) > -1 || node.complete === true) {
        App.mediaLoader.finishedLoading(node, src, callback);
      }

      // Otherwise, make a new bind
      else {
        node.setAttribute('nodeIsLoading', true);
        node.addEventListener('load', function(){
          App.mediaLoader.finishedLoading(node, src, callback);
        });
      }

      return;
    }

    // In case there is only a single size we load it directly
    else if (srcSizes === null || srcSizes === undefined || srcSizes === '') {
      if (node.src.length === 0 || node.src === '' || !node.complete) {
        if(App.verbose){ console.log('%cApp.mediaLoader.load("'+  dataSrc +'");', 'color:gray;'); }
        node.setAttribute('nodeIsLoading', true);
        node.addEventListener('load', function(){
          App.mediaLoader.finishedLoading(node, dataSrc, callback);
        });
        node.src = dataSrc;
      }
    }

    // Otherwise, determine the best size to load
    else {

      // Parse node data
      var file = dataSrc.substring(dataSrc.lastIndexOf('/')+1);
      var filename = file.replace(/\.[^/.]+$/, "");
      var extension = file.substr(file.lastIndexOf('.')+1);
      var pathBase = dataSrc.slice(0,-(extension.length + 1));
      srcSizes = srcSizes.split(',');

      // Load the largest size acceptable (checking array in reverse)
      for (i=srcSizes.length - 1; i >= 0; i--) {
        var size = srcSizes[i].trim();
        var newPath = pathBase + '-' + size + '.' + extension;

        // Load the matched size
        if (App.checkMediaQuery(size) === true) {
          if(App.verbose){ console.log('%cApp.mediaLoader.load("' + newPath + '");', 'color:gray;'); }
          node.setAttribute('nodeIsLoading', '');
          node.addEventListener('load', function(){
            App.mediaLoader.finishedLoading(node, newPath, callback);
          });
          node.setAttribute('currentSizeLoaded', size);
          node.src = newPath;
          return;
        }
      }

      // If no sizes are matched, load the default (smallest) size
      if (node.getAttribute('activeSize') !== 'default') {
        if(App.verbose){ console.log('%cApp.mediaLoader.load("'+  dataSrc +'"); --default', 'color:gray;'); }
        node.setAttribute('nodeIsLoading', '');
        node.addEventListener('load', function(){
          App.mediaLoader.finishedLoading(node, dataSrc, callback);
        });
        node.setAttribute('currentSizeLoaded', 'default');
        node.src = dataSrc;
        return;
      } else {
        console.error('App.mediaLoader.load() -- Unidentified error #1');
      }
    }
  },


  /*------------------------------------------------------------------------------------
    SINGLE NODE FINISHES LOADING
  ------------------------------------------------------------------------------------*/
  finishedLoading: function (node, url, callback) {
    if(App.verbose){ console.info('%cApp.mediaLoader.done("'+ url +'");', 'color:#68B046;'); }
    App.mediaLoader.loaded.push(url);

    // Check if we need to fade in the media after it has loaded
    if (node.hasAttribute('data-fadeIn')) {
      node.removeAttribute('nodeIsLoading');
      node.setAttribute('fadeInStarted', '');
      animationTimeout(320, function(){
        node.removeAttribute('data-fadeIn');
        node.removeAttribute('fadeInStarted');
      });
    }

    // Otherwise, just continue normally
    else {
      node.removeAttribute('nodeIsLoading');
      node.removeAttribute('data-preload');
    }

    // Remove data-src attribute if we no longer need it
    if (!node.hasAttribute('data-srcSizes')) {
      node.removeAttribute('data-src');
    }

    // Run callback function asynchronously
    setTimeout(callback, 50);
  },


  preload: function(scope) {

    // Determine if check is global or scoped
    if (scope === undefined || scope === null) {
      localNodes = document.querySelectorAll(App.mediaLoader.selectorPreload);
    } else {
      localNodes = scope.querySelectorAll(App.mediaLoader.selectorPreload);
    }

    // Preload every node
    array(localNodes).forEach(function App_mediaLoader_check_eachLoop(node) {
      App.mediaLoader.load(node);
    });
  },


  /*------------------------------------------------------------------------------------
    WAIT FOR ALL (TO LOAD)
  ------------------------------------------------------------------------------------*/
  waitForAll: function(target, callback, preloadPriority) {
    var nodesLoaded = 0;
    var preloadPriority = preloadPriority || 0;
    var filter = '';
    var localNodes = [];

    // Check for common errors
    if (typeof target === 'function') {
      console.error('%cApp.mediaLoader.waitForAll(); ERROR: First parameter cannot be a function!', 'color:red;');
      return false;
    }

    // If target is only a selector, find the target first...
    if (typeof target === 'string') {
      target = document.querySelectorAll(target);
    }

    // If there is no define preload priority, we exclude every preload element
    if (preloadPriority === 0) {
      filter = ':not([data-preload])';
    }

    // If target is an array of objects, we concatenate all of their results
    if (target[0]) {
      array(target).forEach(function(node){
        var newNodes = array(node.querySelectorAll(App.mediaLoader.selector + filter + ', [src]' + filter));
        localNodes = localNodes.concat(localNodes, newNodes);
      });
    }

    // Otherwise, just must a single call...
    else {
      localNodes = array(target.querySelectorAll(App.mediaLoader.selector + filter + ', [src]' + filter));
    }

    // If there is no define preload priority, we exclude every preload element
    if (preloadPriority > 0) {
      var defaults = [];
      var priority1 = [];
      var priority2 = [];
      var priority3 = [];
      var priority4 = [];

      // Iterate through each node...
      localNodes.forEach(function(node){
        var itemPriority = parseInt(node.getAttribute('data-preload'));

        // Exclude items which are higher priority than requested
        // And sort items in order of priority
        if (itemPriority <= preloadPriority) {
          if (itemPriority === 1)  {
            priority1.push(node);
          } else if (itemPriority === 2)  {
            priority2.push(node);
          } else if (itemPriority === 3)  {
            priority3.push(node);
          } else if (itemPriority > 3)  {
            priority4.push(node);
          }
        } else if (itemPriority === undefined)  {
          defaults.push(node);
        }
      });

      localNodes = defaults.concat(priority1, priority2, priority3, priority4);
    }

    // Log the number of nodes...
    console.log('App.mediaLoader.waitForAll(' + localNodes.length + ');');

    // If this scope does not have any matched nodes, then callback immediatelly
    if (localNodes.length === 0) {
      console.info('%cApp.mediaLoader.waitForAll.done(): No images were found within this selector!', 'color:#68B046;');
      callback();
      return;
    }

    function checkIfAll() {
      if (nodesLoaded === localNodes.length) {
        console.info('%cApp.mediaLoader.waitForAll.done('+ localNodes.length +');', 'color:#68B046;');
        callback();
        return;
      }
    }

    // Call every node source
    array(localNodes).forEach(function(node){
      App.mediaLoader.load(node, function(){
        nodesLoaded++;
        checkIfAll();
      });
    });
  }
};


// Do an initial check
whenReady(function App_mediaLoader_checkOnReady(){
  App.mediaLoader.check();
});


// Check on scroll
queue.globalScroll.push(function App_mediaLoader_checkOnScroll(){
  App.mediaLoader.check();
});


// Check on resize
queue.globalResize.push(function App_mediaLoader_checkOnResize(){
  array(document.querySelectorAll('[currentSizeLoaded]')).forEach(function(node){
    node.removeAttribute('currentSizeLoaded');
  });
  App.mediaLoader.check();
});


// Check on DOM change
queue.domChange.push(function App_mediaLoader_checkOnDOM(){
  App.mediaLoader.check();
});
