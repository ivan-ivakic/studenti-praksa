App.mediaLoader = {
  selector: '[data-src]:not("[currentSizeLoaded]"), [data-srcSizes]:not("[currentSizeLoaded]")',
  loaded: [],


  /*------------------------------------------------------------------------------------
    CHECK
  ------------------------------------------------------------------------------------*/
  check: function(target) {
    console.log('App.mediaLoader.check();');

    // Base setup
    var target = target || null;
    var localNodes;
    var offset = {};

    // Determine if check is global or scoped
    if (target === undefined || target === null) {
      localNodes = $(App.mediaLoader.selector);
    } else {
      localNodes = $(target).find(App.mediaLoader.selector);
    }

    // Check every node if it's (about to be) visible on the screen
    localNodes.each(function App_mediaLoader_check_eachLoop(i) {
      if (App.checkIfVisible(localNodes[i])=== true) {
        App.mediaLoader.load(localNodes[i]);
      }
    });
  },


  /*------------------------------------------------------------------------------------
    LOAD
  ------------------------------------------------------------------------------------*/
  load: function(node, callback) {

    // Default callback is blank
    var callback = callback || function(){};

    // Fetch node data
    var dataSrc = $(node).attr('data-src');
    var srcSizes = $(node).attr('data-srcSizes');

    // If node has a source, and no dataSrc, we skip it...
    if (dataSrc === undefined || dataSrc === null || dataSrc === '') {

      // If this source is already loaded, just call finishedLoading()
      if (App.mediaLoader.loaded.indexOf($(node).attr('src')) > -1) {
        App.mediaLoader.finishedLoading(node, $(node).attr('src'), callback);
      }

      // Otherwise, make a new bind
      else {
        $(node).attr('nodeIsLoading', true);
        $(node).on('load', App.mediaLoader.finishedLoading(node, $(node).attr('src'), callback));
      }

      // Return since matched
      return;
    }

    // In case there is only a single size we load it directly
    else if (srcSizes === null || srcSizes === undefined || srcSizes === '') {
      if (node.src.length === 0 || node.src === '' || !node.complete) {
        $(node).attr('nodeIsLoading', true);
        console.log('App.mediaLoader.load("'+  dataSrc +'");');
        $(node).on('load', App.mediaLoader.finishedLoading(node, dataSrc, callback)).attr('src', dataSrc).removeAttr('data-src');
        return;
      }
    }

    // Otherwise, determine the best size to load
    else {

      // Parse node data
      var file = dataSrc.substring(dataSrc.lastIndexOf('/')+1);
      var filename = file.replace(/\.[^/.]+$/, "");
      var extension = file.substr(file.lastIndexOf('.')+1);
      var pathBase = dataSrc.slice(0,-(extension.length + 1));
      srcSizes = srcSizes.split(',');

      // Load the largest size acceptable (checking array in reverse)
      for (i=srcSizes.length - 1; i >= 0; i--) {
        var size = srcSizes[i].trim();
        var newPath = pathBase + '-' + size + '.' + extension;

        if (App.checkMediaQuery(size) === true) {
          $(node).attr('nodeIsLoading', true);

          // Load the matched size
          console.log('App.mediaLoader.load("' + newPath + '");');
          $(node).attr({
            'src': newPath,
            'currentSizeLoaded': true
          }).on('load', App.mediaLoader.finishedLoading(node, newPath, callback));

          // Stop propagation when match is found
          return;
        }
      }

      // If no sizes are matched, load the default (smallest) size
      if ($(node).attr('activeSize') !== 'default') {
        console.log('App.mediaLoader.load("'+  dataSrc +'"); --default');
        $(node).on('load', App.mediaLoader.finishedLoading(node, dataSrc, callback)).attr({
          'src': dataSrc,
          'currentSizeLoaded': true
        });
      } else {
        $(node).on('load', App.mediaLoader.finishedLoading(node, dataSrc, callback));
      }
    }
  },


  /*------------------------------------------------------------------------------------
    SINGLE NODE FINISHES LOADING
  ------------------------------------------------------------------------------------*/
  finishedLoading: function (node, url, callback) {
    console.log('App.mediaLoader.done("'+ url +'");');
    App.mediaLoader.loaded.push(url);

    // Default is to gently fade in the media after it has loaded
    var fadeIn = $(node).attr('data-noFadeIn') === undefined;
    if (fadeIn === true) {
      $(node).removeAttr('nodeIsLoading').animate({
        opacity: 1
      }, 500);
    }

    // Otherwise, leave opacity as it is for other design purposes
    else {
      $(node).removeAttr('nodeIsLoading');
    }

    // Run callback function asynchronously
    setTimeout(callback, 100);
  },


  /*------------------------------------------------------------------------------------
    WAIT FOR ALL (TO LOAD)
  ------------------------------------------------------------------------------------*/
  waitForAll: function(target, callback) {
    console.log('App.mediaLoader.waitForAll();');
    // console.log(target);

    // Find all descendant nodes
    var localNodes = $(target).find(App.mediaLoader.selector + ', [src]');
    var nodesLoaded = 0;

    if (localNodes.length === 0) {
      console.info('App.mediaLoader.waitForAll.done(); Info: no images were found within this selector');
      callback();
      return;
    }

    function checkIfAll() {
      if (nodesLoaded === localNodes.length) {
        console.info('App.mediaLoader.waitForAll.done();');
        callback();
        return;
      }
    }

    // Call every node source
    localNodes.each(function(i){
      App.mediaLoader.load(localNodes[i], function(){
        nodesLoaded++;
        checkIfAll();
      });
    });
  }
};


// Do an initial check
queue.documentLoad.push(function App_mediaLoader_checkOnReady(){
  App.mediaLoader.check();
});


// Check on scroll
queue.globalScroll.push(function App_mediaLoader_checkOnScroll(){
  App.mediaLoader.check();
});


// Check on resize
queue.globalResize.push(function App_mediaLoader_checkOnResize(){
  $('[currentSizeLoaded]').removeAttr('currentSizeLoaded');
  App.mediaLoader.check();
});
