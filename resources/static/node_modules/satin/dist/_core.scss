/*————————————————————————————————————————————————————————————————————————————————
  Remove unit values from integers
————————————————————————————————————————————————————————————————————————————————*/
@function strip-unit($num){ @return $num / ($num * 0 + 1); }



/*————————————————————————————————————————————————————————————————————————————————
  Convert rem / em to px
————————————————————————————————————————————————————————————————————————————————*/
@function px($value) {
  @if unit($value) == "rem" {
    @return round($rem-base * strip-unit($value)); // Convert rem values to px
  }
  @else {
    @return $value; // Output pure em or px values
  }
}



/*————————————————————————————————————————————————————————————————————————————————
  EM Helper
————————————————————————————————————————————————————————————————————————————————*/
@function em($value) {
  $value: strip-unit($value) / 16 * 1em;
  @return $value;
}



/*————————————————————————————————————————————————————————————————————————————————
  Directional opposites
————————————————————————————————————————————————————————————————————————————————*/
@function opposite($direction) {
  $directions: (
    top: bottom,
    right: left,
    bottom: top,
    left: right,
    up: down,
    down: up,
    ltr: rtl,
    rtl: ltr
  );

  $opposite: map-get($directions, $direction);
  @if $opposite != null {
    @return $opposite;
  }
  @else {
    @warn "No opposite direction can be found for '#{$direction}'.";
  }
}


/*————————————————————————————————————————————————————————————————————————————————
  REM mixin with pixel fallback

  Syntax:
  @include rem( <attribute>, <values...> );

  Example: @include rem(font-size, 1.2rem);
  Outputs: font-size: 19px; font-size:1.2rem;

  Example: @include rem(margin, 2rem 20px);
  Outputs: margin:32px 20px; margin:2rem 20px; (Initial pixel values are not converted to REM)
————————————————————————————————————————————————————————————————————————————————*/
@mixin rem($property, $values, $important:null) {
  @if $values {
  
    $fallback: ();
    $rem: ();

    @each $value in $values {
      @if $value == 0 or $value == auto or unit($value) == "em" {
        $fallback: append($fallback , $value);
        $rem: append($rem, $value);
      }
      @else {
        $unit: unit($value);
        $val: strip-unit($value);

        @if $unit == "px" {
          $fallback: append($fallback,  $value);
          // $rem: append($rem, ($val / strip-unit($st-baseRem) + rem)); // This line outputs REM values for initial PX values
          $rem: append($rem,  $value); // This line outputs PX values for initial PX values
        }

        @if $unit == "rem" {
          $fallback: append($fallback,  round($val * strip-unit($st-baseRem))+px);
          $rem: append($rem, $value);
        }
      }
    }

    @if $st-pixelFallback {
      #{$property}: $fallback $important; // Output px & em values always

      // Output REM values only if some are present
      $writeRem: false;
      @for $i from 1 through length($rem) {
        @if unit(nth($rem, $i)) == "rem" { $writeRem: true; }
      }
      @if $writeRem == true {
        #{$property}: $rem $important;
      }
    }
    @else{
      #{$property}: $rem;
    }

  }
}