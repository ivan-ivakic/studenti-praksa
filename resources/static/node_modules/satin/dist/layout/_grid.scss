@mixin st-grid {
  $spacing: $st-grid-spacing;


  /*----------------------------------------------------------------------------------
    Grid basics
  ----------------------------------------------------------------------------------*/
  .container {

  }


  /*----------------------------------------------------------------------------------
    Grid basics
  ----------------------------------------------------------------------------------*/
  .grid {
    clear: both;
    margin-left: auto;
    margin-right: auto;
    list-style: none !important;
    font-size: 0;
    letter-spacing: -0.31em;
    text-align: center;
    direction: $st-direction;


    // Position modifiers
    &.-reverse { direction: opposite($st-direction); }
    &.-alignRight { text-align: right; }
    &.-alignLeft { text-align: left; }


    // Grid column
    &_column {
      display: inline-block;
      margin-left: auto;
      margin-right: auto;
      width: 100%;
      padding-left: $st-grid-spacing / 2;
      padding-right: $st-grid-spacing / 2;
      vertical-align: top;
      font-size: 1rem;
      letter-spacing: normal;
      text-align: left;
      direction: ltr;
    }
  }


  // Nested grid has negative margin
  .grid .grid {
    margin-left: -($st-grid-spacing / 2);
    margin-right: -($st-grid-spacing / 2);
  }


  // By default, grid has a vertical stack spacing.
  // Any of these modifiers disables that behaviour
  .grid:not(.-noStackSpacing):not(.-clean) {
    margin-top: -($st-grid-spacing);


    > .grid_column {
      margin-top: $st-grid-spacing;


      // Negative margin fix
      > *:first-child:before {
        display: block;
        overflow: hidden;
        padding-top: 0.1px;
      }
    }
  }


  // [dir="rtl"] .grid, .grid[dir="rtl"] {
  //   direction: rtl;
  //   // font-size: 0; // Possibly redundant

  //   .grid_column {
  //     //:@if $arabic-font-enabled == true { font-size, $arabic-font-size);}
  //     text-align: right;
  //     direction: rtl;
  //   }

  //   &.-reverse {
  //     direction: ltr;
  //   }
  // }


  /*————————————————————————————————————————————————————————————————————————————————
    Query this shit
  ————————————————————————————————————————————————————————————————————————————————*/
  @if $st-grid-small-include == true {
    @if $st-grid-responsiveSpacing == true { $spacing: $st-grid-spacing / $st-deviceScale / $st-deviceScale; }
    @else { $spacing: $st-grid-spacing; }
    @include small {
      .grid{ max-width: $st-grid-small-width;
        &_column {
          padding-left: $spacing / 2;
          padding-right: $spacing / 2;
        }
      }
      @include st-gridBreakpoint("small");
    }
  }

  @if $st-grid-smallPlus-include == true {
    @include smallPlus {
      .grid{ max-width: $st-grid-smallPlus-width; }
      @include st-gridBreakpoint("smallPlus");
    }
  }

  @if $st-grid-medium-include == true {
    @if $st-grid-responsiveSpacing == true { $spacing: $st-grid-spacing / $st-deviceScale / $st-deviceScale; }
    @else { $spacing: $st-grid-spacing; }
    @include medium {
      .grid{ max-width: $st-grid-medium-width;
        &_column {
          padding-left: $spacing / 2;
          padding-right: $spacing / 2;
        }
      }
      @include st-gridBreakpoint("medium");
    }
  }

  @if $st-grid-mediumPlus-include == true {
    @include mediumPlus {
      .grid{ max-width: $st-grid-mediumPlus-width; }
      @include st-gridBreakpoint("mediumPlus");
    }
  }

  @if $st-grid-large-include == true {
    @include large {
      .grid{ max-width: $st-grid-large-width;
        &_column {
          padding-left: $st-grid-spacing / 2;
          padding-right: $st-grid-spacing / 2;
        }
      }
      @include st-gridBreakpoint("large");
    }
  }

  @if $st-grid-largePlus-include == true {
    @include largePlus {
      .grid{ max-width: $st-grid-largePlus-width; }
      @include st-gridBreakpoint("largePlus");
    }
  }

  @if $st-grid-xlarge-include == true {
    @include xlarge {
      .grid{ max-width: $st-grid-xlarge-width; }
      @include st-gridBreakpoint("xlarge");
    }
  }

  // Special print column rule
  @include print {
    .gridonja { background: red; }
    @include st-gridBreakpoint("print");
  }


  /*————————————————————————————————————————————————————————————————————————————————
    Collapsed grid
  ————————————————————————————————————————————————————————————————————————————————*/
  .grid.-collapse {
    margin-left: auto !important;
    margin-right: auto !important;

    > .grid_column {
      padding-left: 0;
      padding-right: 0;
    }

    @include small {
      @if $st-grid-responsiveSpacing == true { $spacing: $st-grid-spacing / $st-deviceScale / $st-deviceScale; }
      @else { $spacing: $st-grid-spacing; }
      &.-smallExpand > .grid_column {
        padding-left: ($spacing / 2);
        padding-right: ($spacing / 2);
      }
    }

    @include medium {
      @if $st-grid-responsiveSpacing == true { $spacing: $st-grid-spacing / $st-deviceScale / $st-deviceScale; }
      @else { $spacing: $st-grid-spacing; }
      &.-mediumExpand > .grid_column {
        padding-left: ($spacing / 2);
        padding-right: ($spacing / 2);
      }
    }

    @include large {
      &.-mediumExpand > .grid_column {
        padding-left: ($st-grid-spacing / 2);
        padding-right: ($st-grid-spacing / 2);
      }
      &.-largeExpand > .grid_column {
        padding-left: ($st-grid-spacing / 2);
        padding-right: ($st-grid-spacing / 2);
      }
    }
  }


  /*————————————————————————————————————————————————————————————————————————————————
    Responsive gaps for columns
  ————————————————————————————————————————————————————————————————————————————————*/
  // .grid.-gaps {
  //   margin-top: -($st-grid-spacing / 2);


  //   > .grid_column {
  //     margin-top: $st-grid-spacing / 2;


  //     // Negative margin fix
  //     > div, > section, > header, > form {
  //       overflow: hidden;
  //       padding-top: 0.1px;
  //     }
  //   }
  // }


}


// ---------------------------------------------------------------------------------


@mixin st-gridBreakpoint($breakpoint) {
  @for $i from 1 through $st-grid-columns {
    $class: '-' + $breakpoint + $i;
    .#{$class} {
      width: percentage($i / $st-grid-columns);
    }
  }
}


// ---------------------------------------------------------------------------------


@mixin st-gridSpacing($customSpacing, $modifierClass:null, $multiplier:$st-deviceScale){

  // With modifier class
  @if $modifierClass {
    @include st-gridSpacing-margin(".grid.#{$modifierClass}", $customSpacing, false);
  }

  // Root with no modifiers
  @else {
    @include st-gridSpacing-margin(".grid", $customSpacing);
  }

}


// Spacing helper
@mixin st-gridSpacing-margin($classes, $customSpacing, $root:true){

  #{$classes} {
    > .grid_column {
      padding-left: ($customSpacing / 2);
      padding-right: ($customSpacing / 2);
    }
  }

  // Left-right margins apply only when it's not a root .grid
  .container #{$classes},
  .grid #{$classes} {
    margin-left: -($customSpacing / 2);
    margin-right: -($customSpacing / 2);
  }

  // Don't output vertical margins on related modifiers
  #{$classes}:not(.-noStackSpacing):not(.-clean) {
    margin-top: -($customSpacing);

    > .grid_column {
      margin-top: $customSpacing;
    }
  }
}
