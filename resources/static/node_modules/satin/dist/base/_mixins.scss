/*————————————————————————————————————————————————————————————————————————————————
  Media queries
————————————————————————————————————————————————————————————————————————————————*/
  $reduction: 0.02;
  @mixin small { @media only screen and ( min-width: $st-grid-small-breakpoint ){ @content; }}
  @mixin smallDown { @media only screen and ( max-width: $st-grid-smallPlus-breakpoint - $reduction ){ @content; }}
  @mixin smallOnly { @media only screen and ( min-width: $st-grid-small-breakpoint ) and ( max-width: $st-grid-smallPlus-breakpoint - $reduction ){ @content; }}
  @mixin smallPlus { @media only screen and ( min-width: $st-grid-smallPlus-breakpoint ){ @content; }}
  @mixin smallPlusDown { @media only screen and ( max-width: $st-grid-medium-breakpoint - $reduction ){ @content; }}
  @mixin smallPlusOnly { @media only screen and ( min-width: $st-grid-smallPlus-breakpoint ) and ( max-width: $st-grid-medium-breakpoint - $reduction ){ @content; }}
  @mixin medium { @media only screen and ( min-width: $st-grid-medium-breakpoint ){ @content; }}
  @mixin mediumDown { @media only screen and ( max-width: $st-grid-mediumPlus-breakpoint - $reduction ){ @content; }}
  @mixin mediumOnly { @media only screen and ( min-width: $st-grid-medium-breakpoint ) and ( max-width: $st-grid-mediumPlus-breakpoint - $reduction ){ @content; }}
  @mixin mediumPlus { @media only screen and ( min-width: $st-grid-mediumPlus-breakpoint ){ @content; }}
  @mixin mediumPlusDown { @media only screen and ( max-width: $st-grid-large-breakpoint - $reduction ){ @content; }}
  @mixin mediumPlusOnly { @media only screen and ( min-width: $st-grid-mediumPlus-breakpoint ) and ( max-width: $st-grid-large-breakpoint - $reduction ){ @content; }}
  @mixin large { @media only screen and ( min-width: $st-grid-large-breakpoint ){ @content; }}
  @mixin largeDown { @media only screen and ( max-width: $st-grid-large-breakpoint - $reduction ){ @content; }}
  @mixin largeOnly { @media only screen and ( min-width: $st-grid-large-breakpoint ) and ( max-width: $st-grid-largePlus-breakpoint - $reduction ){ @content; }}
  @mixin largePlus { @media only screen and ( min-width: $st-grid-largePlus-breakpoint ){ @content; }}
  @mixin largePlusDown { @media only screen and ( max-width: $st-grid-largePlus-breakpoint - $reduction ){ @content; }}
  @mixin largePlusOnly { @media only screen and ( min-width: $st-grid-largePlus-breakpoint ) and ( max-width: $st-grid-xlarge-breakpoint - $reduction ){ @content; }}
  @mixin xlarge { @media only screen and ( min-width: $st-grid-xlarge-breakpoint ){ @content; }}
  @mixin respond($query){ @media only screen and ( $query ){ @content; } } // Custom media query
  @mixin print { @media print { @content; } } // Print media query

  @mixin landscape { @media only screen and ( orientation: landscape ){ @content; }}
  @mixin short { @media only screen and ( max-height: 500px ){ @content; }}
  @mixin retina { @media only screen and ( min-device-pixel-ratio: 1.5 ){ @content; }}



/*————————————————————————————————————————————————————————————————————————————————
  Scalable / Responsive values

  Syntax:
  @include responsive(
    <attribute>, <value>, <multiplier>?
  );

  Sample usage:
  @include responsive(
    margin-top, 20px, 3,
    margin-bottom, 50px, 2
  );
————————————————————————————————————————————————————————————————————————————————*/
@mixin responsive(
  $attribute, $value, $multiplier:$st-baseRatio,
  $attribute2:null, $value2:null, $multiplier2:$st-baseRatio,
  $attribute3:null, $value3:null, $multiplier3:$st-baseRatio
){

  @if unit($value) == px { #{$attribute}: $value; }
  @else { @include rem($attribute, $value); }

  // Attribute 2
  @if $attribute2 != null {
    @if unit($value2) == px { #{$attribute2}: $value2; }
    @else { @include rem($attribute2, $value2); }
  }

  // Attribute 3
  @if $attribute3 != null {
    @if unit($value3) == px { #{$attribute3}: $value3; }
    @else { @include rem($attribute3, $value3); }
  }


  @include medium {
    $new_value: $value * $multiplier;
    @if unit($value) == px { #{$attribute}: round($new_value); }
    @else { @include rem($attribute, $new_value); }

    // Attribute 2
    @if $attribute2 != null {
      $new_value: $value2 * $multiplier2;
      @if unit($value2) == px { #{$attribute2}: round($new_value); }
      @else { @include rem($attribute2, $new_value); }
    }

    // Attribute 3
    @if $attribute3 != null {
      $new_value: $value3 * $multiplier3;
      @if unit($value3) == px { #{$attribute3}: round($new_value); }
      @else { @include rem($attribute3, $new_value); }
    }
  }


  @include large {
    $new_value: $value * $multiplier * $multiplier;
    @if unit($value) == px { #{$attribute}: round($new_value); }
    @else { @include rem($attribute, $new_value); }

    // Attribute 2
    @if $attribute2 != null {
      $new_value: $value2 * $multiplier2 * $multiplier2;
      @if unit($value2) == px { #{$attribute2}: round($new_value); }
      @else { @include rem($attribute2, $new_value); }
    }

    // Attribute 3
    @if $attribute3 != null {
      $new_value: $value3 * $multiplier3;
      @if unit($value3) == px { #{$attribute3}: round($new_value); }
      @else { @include rem($attribute3, $new_value); }
    }
  }

}



/*----------------------------------------------------------------------------------
  Short-hand calls for "responsive" mixin
----------------------------------------------------------------------------------*/
@mixin font-size($exponent, $ratio:$st-contentScale){
  $base: fontSize($exponent, $base:1em);
  @include responsiveScale(font-size, $base, $ratio);
}



/*----------------------------------------------------------------------------------
  Scale a property over various device sizes using a modular ratio
  Values are "desktop-first". Values are then scaled DOWN for mobile!
----------------------------------------------------------------------------------*/
@mixin responsiveScale($attribute, $base, $ratio:$st-deviceScale){
  @if $attribute == font-size and $base < 1.75 {
    $ratio: $ratio * 0.95;
  }

  // Mobile (with a minimum scale overwrite for fonts)
  $result: decimalRound(modularScale($base, -2, $ratio), 2);
  @if $attribute == font-size and $result < $st-fontScaleMinimum {
    $result: $st-fontScaleMinimum;
  }
  #{$attribute}: $result;

  // Tablet (with a minimum scale overwrite for fonts)
  @include medium {
    $result: decimalRound(modularScale($base, -1, $ratio), 2);
    @if $attribute == font-size and $result < $st-fontScaleMinimum {
      $result: $st-fontScaleMinimum;
    }
    #{$attribute}: $result;
  }

  // Desktop
  @include large {
    #{$attribute}: decimalRound($base, 2);
  }
}



/*————————————————————————————————————————————————————————————————————————————————
  CSS Arrrow / Triangle
————————————————————————————————————————————————————————————————————————————————*/
  @mixin st-arrow($size:6px, $color:#000, $st-direction:"down"){
    width: 0;
    height: 0;
    border: $size solid transparent;
    @include st-arrowColor($color, $st-direction);
  }

  @mixin st-arrowColor($color, $st-direction) {
    @if $st-direction == "up" { border-bottom-color:$color; }
    @else if $st-direction == "right" { border-left-color:$color; }
    @else if $st-direction == "down" { border-top-color:$color; }
    @else { border-right-color:$color; }
  }

  // Backward compatibility mixins
  @mixin st-triangle($size:6px, $color:#000, $st-direction:"down"){
    @include st-arrow($size, $color, $st-direction);
    @include st-arrowColor($color, $st-direction);
  }
  @mixin st-triangle-color($color, $st-direction) {
    @include st-arrowColor($color, $st-direction);
  }



/*————————————————————————————————————————————————————————————————————————————————
  Icon scale
————————————————————————————————————————————————————————————————————————————————*/
  @mixin img-scale($src, $icon, $scale:1){
    $path: $file-path + "/media/#{$src}/#{$icon}.png";
    @if file_exists($path) {
      $width: image_width($path);
      $height: image_height($path);
      width: round($width * $scale);
      height: round($height * $scale);
    }
  }



/*————————————————————————————————————————————————————————————————————————————————
  Proportional image scaling
————————————————————————————————————————————————————————————————————————————————*/
  @mixin scale($original_width, $original_height, $target_height){
    @if ($original_width > $original_height) {
      width: ceil($target_height / ( $original_height / $original_width ))+px;
      height: ($target_height)+px;
    }
    @else if ($original_width < $original_height) {
      width: ceil($target_height / ( $original_height / $original_width ))+px;
      height: ($target_height)+px;
    }
    @else {
      width: ($target_height)+px;
      height: ($target_height)+px;
    }
  }



/*————————————————————————————————————————————————————————————————————————————————
  Base64 an image
————————————————————————————————————————————————————————————————————————————————*/
  @mixin base64($image){
    $path: $file-path + "/media/" + $image;
    @if file_exists($path) {
      background-image: inline_image($path);
    }
  }


/*————————————————————————————————————————————————————————————————————————————————
  Clearfix
————————————————————————————————————————————————————————————————————————————————*/
  @mixin clearfix {
    &:after {
      display: table;
      clear: both;
      content: "";
    }
  }
  %clearfix { @include clearfix; }


/*————————————————————————————————————————————————————————————————————————————————
  Automatic right-to-left support mixins
————————————————————————————————————————————————————————————————————————————————*/
  @mixin rtl {
    @at-root {
      [dir="rtl"] & {
        @content;
      }
    }
  }

  @mixin float($st-direction) {
    float: $st-direction;
    @at-root {
      [dir="rtl"] & {
        float: opposite($st-direction);
      }
    }
  }

  @mixin text-align($st-direction) {
    text-align: $st-direction;
    @at-root {
      [dir="rtl"] & {
        text-align: opposite($st-direction);
      }
    }
  }

