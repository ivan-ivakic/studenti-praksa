/*----------------------------------------------------------------------------------
  Image URL helper
----------------------------------------------------------------------------------*/
  @function path($path){
    @return url("#{$st-img-path}#{$path}");
  }


/*----------------------------------------------------------------------------------
  Z-index helper
----------------------------------------------------------------------------------*/
  @function z($type, $offset:0) {
    @if $type == layout {
      @return 10 + $offset;
    } @else if $type == modal {
      @return 50 + $offset;
    } @else if $type == below {
      @return -1 - $offset;
    } @else {
      @return 1 + $offset;
    }
  }



/*----------------------------------------------------------------------------------
  Tint & Shade
----------------------------------------------------------------------------------*/
  @function tint($color, $percent){
    @return mix(white, $color, $percent);
  }
  @function shade($color, $percent){
    @return mix(black, $color, $percent);
  }



/*----------------------------------------------------------------------------------
  Calculate font-size based on an exponent
----------------------------------------------------------------------------------*/
  @function fontSize($exponent, $base:1em){
    $return: modularScale($base, $exponent, $st-contentScale);
    @return decimalRound($return, 2);
  }



/*----------------------------------------------------------------------------------
  Calculate power exponent of a base value using a ratio
----------------------------------------------------------------------------------*/
  @function modularScale($base, $exponent, $ratio:$st-contentScale){
    $unit: $base * 0 + 1;
    $return: strip-unit($base);

    @if $exponent > 0 {
      @for $i from 1 to $exponent {
        $return: $return * $ratio;
      }
    }

    @else if $exponent < 0 {
      @for $i from (0) to (abs($exponent)) {
        $return: $return / $ratio;
      }
    }

    @return $return * $unit;
  }



/*----------------------------------------------------------------------------------
  Round a number to specified digits.

  decimalRound(0.333)    => 0
  decimalRound(0.333, 1) => 0.3
  decimalRound(0.333, 2) => 0.33
----------------------------------------------------------------------------------*/
  @function decimalRound ($number, $digits:0, $mode:round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
      @warn '#{ $number } is not a number.';
      @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
      @warn '#{ $digits } is not a number.';
      @return $number;
    } @else if not unitless($digits) {
      @warn '#{ $digits } has a unit.';
      @return $number;
    }
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
    @if $mode == round {
      @return round($number * $n) / $n;
    } @else if $mode == ceil {
      @return ceil($number * $n) / $n;
    } @else if $mode == floor {
      @return floor($number * $n) / $n;
    } @else {
      @warn '#{ $mode } is undefined keyword.';
      @return $number;
    }
  }
